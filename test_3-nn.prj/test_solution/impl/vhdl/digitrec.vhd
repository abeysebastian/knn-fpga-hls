-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (48 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of digitrec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "digitrec,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=32487,HLS_SYN_TPT=none,HLS_SYN_MEM=192,HLS_SYN_DSP=0,HLS_SYN_FF=1978,HLS_SYN_LUT=5695}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_708 : STD_LOGIC_VECTOR (11 downto 0) := "011100001000";
    constant ap_const_lv13_E10 : STD_LOGIC_VECTOR (12 downto 0) := "0111000010000";
    constant ap_const_lv14_1C20 : STD_LOGIC_VECTOR (13 downto 0) := "01110000100000";
    constant ap_const_lv14_2328 : STD_LOGIC_VECTOR (13 downto 0) := "10001100101000";
    constant ap_const_lv13_1518 : STD_LOGIC_VECTOR (12 downto 0) := "1010100011000";
    constant ap_const_lv13_1138 : STD_LOGIC_VECTOR (12 downto 0) := "1000100111000";
    constant ap_const_lv12_840 : STD_LOGIC_VECTOR (11 downto 0) := "100001000000";
    constant ap_const_lv14_2A30 : STD_LOGIC_VECTOR (13 downto 0) := "10101000110000";
    constant ap_const_lv15_3F48 : STD_LOGIC_VECTOR (14 downto 0) := "011111101001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal training_data_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_data_V_ce0 : STD_LOGIC;
    signal training_data_V_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal training_data_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_data_V_ce1 : STD_LOGIC;
    signal training_data_V_q1 : STD_LOGIC_VECTOR (47 downto 0);
    signal training_data_V_address2 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_data_V_ce2 : STD_LOGIC;
    signal training_data_V_q2 : STD_LOGIC_VECTOR (47 downto 0);
    signal reg_1029 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_1034 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_1040 : STD_LOGIC_VECTOR (47 downto 0);
    signal reg_1046 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_1052 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1058 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1064 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1070 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1076 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1082 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1088 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1094 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1100 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1106 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1112 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1118 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1124 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1130 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1136 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1142 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1148 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1154 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1159 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1164 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1169 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1174 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1179 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1184 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1189 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1199 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1204 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1209 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_1214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_2288 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_1226_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_2296 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1232_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_2301 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex_t_reg_2305 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_fu_1252_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_2342 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal idx_urem_fu_1810_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i4_cast1_fu_1818_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i4_cast1_reg_2352 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i4_cast2_fu_1822_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal i4_cast2_reg_2357 : STD_LOGIC_VECTOR (13 downto 0);
    signal i4_cast225_cast1_fu_1826_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i4_cast225_cast1_reg_2364 : STD_LOGIC_VECTOR (11 downto 0);
    signal i4_cast225_cast_fu_1830_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i4_cast225_cast_reg_2369 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_fu_1840_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_2378 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_1834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_update_knn_fu_664_min_distances_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V12_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V2_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V3_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V14_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V15_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V16_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V17_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V28_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V29_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V210_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V211_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_min_distances_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_knn_fu_664_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_5 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_6 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_7 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_9 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_10 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_return_11 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_664_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_update_knn_1_fu_699_min_distances_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V12_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V2_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V13_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V14_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V15_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V26_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V27_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V28_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_min_distances_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_5 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_6 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_7 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_return_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_699_ap_ce : STD_LOGIC;
    signal grp_update_knn_1_fu_725_min_distances_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V12_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V2_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V13_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V14_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V15_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V26_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V27_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V28_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_min_distances_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_5 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_6 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_7 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_return_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_1_fu_725_ap_ce : STD_LOGIC;
    signal grp_knn_vote_fu_755_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_319 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_urem_reg_330 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_k_phi_fu_346_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_342 : STD_LOGIC_VECTOR (1 downto 0);
    signal knn_set_2_2_2_V_3_reg_353 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_1_V_3_reg_363 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_0_V_3_reg_373 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_2_V_3_reg_383 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_1_V_3_reg_393 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_0_V_3_reg_403 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_2_V_3_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_1_V_3_reg_423 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_0_V_3_reg_433 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_2_V_3_reg_443 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_1_V_3_reg_453 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_0_V_3_reg_463 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_2_V_3_reg_473 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_1_V_3_reg_483 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_0_V_3_reg_493 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_2_V_3_reg_503 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_1_V_3_reg_513 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_0_V_3_reg_523 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_3_V_3_reg_533 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_2_V_3_reg_543 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_1_V_3_reg_553 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_0_V_3_reg_563 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_3_V_3_reg_573 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_2_V_3_reg_583 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_1_V_3_reg_593 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_0_V_3_reg_603 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_3_V_3_reg_613 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_2_V_3_reg_623 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_1_V_3_reg_633 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_0_V_3_reg_643 : STD_LOGIC_VECTOR (5 downto 0);
    signal i4_reg_653 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_1846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_1_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_2_fu_1868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_4_fu_1878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_5_fu_1888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_3_fu_1898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_7_fu_1912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_8_fu_1926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_6_fu_1936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_9_fu_1946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_set_0_0_0_V_fu_92 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_0_V_5_fu_1492_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_1_V_fu_96 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_1_V_5_fu_1505_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_2_V_fu_100 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_2_V_5_fu_1518_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_3_V_fu_104 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_3_V_5_fu_1531_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_0_V_fu_108 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_0_V_5_fu_1420_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_1_V_fu_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_1_V_5_fu_1433_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_2_V_fu_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_2_V_5_fu_1446_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_3_V_fu_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_3_V_5_fu_1459_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_0_V_fu_124 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_0_V_5_fu_1564_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_1_V_fu_128 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_1_V_5_fu_1577_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_2_V_fu_132 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_2_V_5_fu_1590_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_3_V_fu_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_3_V_5_fu_1603_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_0_V_fu_140 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_0_V_5_fu_1312_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_1_V_fu_144 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_1_V_5_fu_1325_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_2_V_fu_148 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_2_V_5_fu_1338_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_0_V_fu_152 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_0_V_5_fu_1258_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_1_V_fu_156 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_1_V_5_fu_1271_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_2_V_fu_160 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_2_V_5_fu_1284_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_0_V_fu_164 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_0_V_5_fu_1366_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_1_V_fu_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_1_V_5_fu_1379_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_2_V_fu_172 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_2_V_5_fu_1392_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_0_V_fu_176 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_0_V_5_fu_1690_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_1_V_fu_180 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_1_V_5_fu_1703_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_2_V_fu_184 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_2_V_5_fu_1716_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_0_V_fu_188 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_0_V_5_fu_1636_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_1_V_fu_192 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_1_V_5_fu_1649_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_2_V_fu_196 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_2_V_5_fu_1662_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_0_V_fu_200 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_0_V_5_fu_1744_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_1_V_fu_204 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_1_V_5_fu_1757_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_2_V_fu_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_2_V_5_fu_1770_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_urem_fu_1798_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_106_fu_1804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_1_fu_1851_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_2_fu_1862_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_4_fu_1873_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_5_fu_1883_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_3_fu_1893_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_7_fu_1903_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_7_cast_fu_1908_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_8_fu_1917_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_8_cast_fu_1922_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_6_fu_1931_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_9_fu_1941_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component update_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
        train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
        min_distances_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V12_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V2_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V3_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V14_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V15_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V16_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V17_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V28_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V29_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V210_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V211_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component update_knn_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
        train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
        min_distances_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V12_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V2_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V13_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V14_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V15_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V26_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V27_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V28_read : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component knn_vote IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        knn_set_0_0_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_0_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_0_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_0_3_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_1_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_1_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_1_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_1_3_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_2_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_2_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_2_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_2_3_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_0_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_0_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_0_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_1_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_1_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_1_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_2_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_2_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_2_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_0_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_0_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_0_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_1_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_1_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_1_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_2_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_2_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_2_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component digitrec_mux_42_6g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component digitrec_trainingfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (47 downto 0);
        address2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    training_data_V_U : component digitrec_trainingfYi
    generic map (
        DataWidth => 48,
        AddressRange => 18000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_address0,
        ce0 => training_data_V_ce0,
        q0 => training_data_V_q0,
        address1 => training_data_V_address1,
        ce1 => training_data_V_ce1,
        q1 => training_data_V_q1,
        address2 => training_data_V_address2,
        ce2 => training_data_V_ce2,
        q2 => training_data_V_q2);

    grp_update_knn_fu_664 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        test_inst_V => input_V,
        train_inst_V => reg_1029,
        min_distances_V_read => grp_update_knn_fu_664_min_distances_V_read,
        min_distances_V12_read => grp_update_knn_fu_664_min_distances_V12_read,
        min_distances_V2_read => grp_update_knn_fu_664_min_distances_V2_read,
        min_distances_V3_read => grp_update_knn_fu_664_min_distances_V3_read,
        min_distances_V14_read => grp_update_knn_fu_664_min_distances_V14_read,
        min_distances_V15_read => grp_update_knn_fu_664_min_distances_V15_read,
        min_distances_V16_read => grp_update_knn_fu_664_min_distances_V16_read,
        min_distances_V17_read => grp_update_knn_fu_664_min_distances_V17_read,
        min_distances_V28_read => grp_update_knn_fu_664_min_distances_V28_read,
        min_distances_V29_read => grp_update_knn_fu_664_min_distances_V29_read,
        min_distances_V210_read => grp_update_knn_fu_664_min_distances_V210_read,
        min_distances_V211_read => grp_update_knn_fu_664_min_distances_V211_read,
        min_distances_V_offset => grp_update_knn_fu_664_min_distances_V_offset,
        ap_return_0 => grp_update_knn_fu_664_ap_return_0,
        ap_return_1 => grp_update_knn_fu_664_ap_return_1,
        ap_return_2 => grp_update_knn_fu_664_ap_return_2,
        ap_return_3 => grp_update_knn_fu_664_ap_return_3,
        ap_return_4 => grp_update_knn_fu_664_ap_return_4,
        ap_return_5 => grp_update_knn_fu_664_ap_return_5,
        ap_return_6 => grp_update_knn_fu_664_ap_return_6,
        ap_return_7 => grp_update_knn_fu_664_ap_return_7,
        ap_return_8 => grp_update_knn_fu_664_ap_return_8,
        ap_return_9 => grp_update_knn_fu_664_ap_return_9,
        ap_return_10 => grp_update_knn_fu_664_ap_return_10,
        ap_return_11 => grp_update_knn_fu_664_ap_return_11,
        ap_ce => grp_update_knn_fu_664_ap_ce);

    grp_update_knn_1_fu_699 : component update_knn_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        test_inst_V => input_V,
        train_inst_V => reg_1034,
        min_distances_V_read => grp_update_knn_1_fu_699_min_distances_V_read,
        min_distances_V12_read => grp_update_knn_1_fu_699_min_distances_V12_read,
        min_distances_V2_read => grp_update_knn_1_fu_699_min_distances_V2_read,
        min_distances_V13_read => grp_update_knn_1_fu_699_min_distances_V13_read,
        min_distances_V14_read => grp_update_knn_1_fu_699_min_distances_V14_read,
        min_distances_V15_read => grp_update_knn_1_fu_699_min_distances_V15_read,
        min_distances_V26_read => grp_update_knn_1_fu_699_min_distances_V26_read,
        min_distances_V27_read => grp_update_knn_1_fu_699_min_distances_V27_read,
        min_distances_V28_read => grp_update_knn_1_fu_699_min_distances_V28_read,
        min_distances_V_offset => grp_update_knn_1_fu_699_min_distances_V_offset,
        ap_return_0 => grp_update_knn_1_fu_699_ap_return_0,
        ap_return_1 => grp_update_knn_1_fu_699_ap_return_1,
        ap_return_2 => grp_update_knn_1_fu_699_ap_return_2,
        ap_return_3 => grp_update_knn_1_fu_699_ap_return_3,
        ap_return_4 => grp_update_knn_1_fu_699_ap_return_4,
        ap_return_5 => grp_update_knn_1_fu_699_ap_return_5,
        ap_return_6 => grp_update_knn_1_fu_699_ap_return_6,
        ap_return_7 => grp_update_knn_1_fu_699_ap_return_7,
        ap_return_8 => grp_update_knn_1_fu_699_ap_return_8,
        ap_ce => grp_update_knn_1_fu_699_ap_ce);

    grp_update_knn_1_fu_725 : component update_knn_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        test_inst_V => input_V,
        train_inst_V => reg_1040,
        min_distances_V_read => grp_update_knn_1_fu_725_min_distances_V_read,
        min_distances_V12_read => grp_update_knn_1_fu_725_min_distances_V12_read,
        min_distances_V2_read => grp_update_knn_1_fu_725_min_distances_V2_read,
        min_distances_V13_read => grp_update_knn_1_fu_725_min_distances_V13_read,
        min_distances_V14_read => grp_update_knn_1_fu_725_min_distances_V14_read,
        min_distances_V15_read => grp_update_knn_1_fu_725_min_distances_V15_read,
        min_distances_V26_read => grp_update_knn_1_fu_725_min_distances_V26_read,
        min_distances_V27_read => grp_update_knn_1_fu_725_min_distances_V27_read,
        min_distances_V28_read => grp_update_knn_1_fu_725_min_distances_V28_read,
        min_distances_V_offset => grp_update_knn_1_fu_725_min_distances_V_offset,
        ap_return_0 => grp_update_knn_1_fu_725_ap_return_0,
        ap_return_1 => grp_update_knn_1_fu_725_ap_return_1,
        ap_return_2 => grp_update_knn_1_fu_725_ap_return_2,
        ap_return_3 => grp_update_knn_1_fu_725_ap_return_3,
        ap_return_4 => grp_update_knn_1_fu_725_ap_return_4,
        ap_return_5 => grp_update_knn_1_fu_725_ap_return_5,
        ap_return_6 => grp_update_knn_1_fu_725_ap_return_6,
        ap_return_7 => grp_update_knn_1_fu_725_ap_return_7,
        ap_return_8 => grp_update_knn_1_fu_725_ap_return_8,
        ap_ce => grp_update_knn_1_fu_725_ap_ce);

    grp_knn_vote_fu_755 : component knn_vote
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        knn_set_0_0_0_V_r => knn_set_0_0_0_V_3_reg_643,
        knn_set_0_0_1_V_r => knn_set_0_0_1_V_3_reg_633,
        knn_set_0_0_2_V_r => knn_set_0_0_2_V_3_reg_623,
        knn_set_0_0_3_V_r => knn_set_0_0_3_V_3_reg_613,
        knn_set_0_1_0_V_r => knn_set_0_1_0_V_3_reg_603,
        knn_set_0_1_1_V_r => knn_set_0_1_1_V_3_reg_593,
        knn_set_0_1_2_V_r => knn_set_0_1_2_V_3_reg_583,
        knn_set_0_1_3_V_r => knn_set_0_1_3_V_3_reg_573,
        knn_set_0_2_0_V_r => knn_set_0_2_0_V_3_reg_563,
        knn_set_0_2_1_V_r => knn_set_0_2_1_V_3_reg_553,
        knn_set_0_2_2_V_r => knn_set_0_2_2_V_3_reg_543,
        knn_set_0_2_3_V_r => knn_set_0_2_3_V_3_reg_533,
        knn_set_1_0_0_V_r => knn_set_1_0_0_V_3_reg_523,
        knn_set_1_0_1_V_r => knn_set_1_0_1_V_3_reg_513,
        knn_set_1_0_2_V_r => knn_set_1_0_2_V_3_reg_503,
        knn_set_1_1_0_V_r => knn_set_1_1_0_V_3_reg_493,
        knn_set_1_1_1_V_r => knn_set_1_1_1_V_3_reg_483,
        knn_set_1_1_2_V_r => knn_set_1_1_2_V_3_reg_473,
        knn_set_1_2_0_V_r => knn_set_1_2_0_V_3_reg_463,
        knn_set_1_2_1_V_r => knn_set_1_2_1_V_3_reg_453,
        knn_set_1_2_2_V_r => knn_set_1_2_2_V_3_reg_443,
        knn_set_2_0_0_V_r => knn_set_2_0_0_V_3_reg_433,
        knn_set_2_0_1_V_r => knn_set_2_0_1_V_3_reg_423,
        knn_set_2_0_2_V_r => knn_set_2_0_2_V_3_reg_413,
        knn_set_2_1_0_V_r => knn_set_2_1_0_V_3_reg_403,
        knn_set_2_1_1_V_r => knn_set_2_1_1_V_3_reg_393,
        knn_set_2_1_2_V_r => knn_set_2_1_2_V_3_reg_383,
        knn_set_2_2_0_V_r => knn_set_2_2_0_V_3_reg_373,
        knn_set_2_2_1_V_r => knn_set_2_2_1_V_3_reg_363,
        knn_set_2_2_2_V_r => knn_set_2_2_2_V_3_reg_353,
        ap_return => grp_knn_vote_fu_755_ap_return);

    digitrec_mux_42_6g8j_U92 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_1_1_0_V_fu_152,
        din2 => knn_set_1_1_0_V_fu_152,
        din3 => knn_set_1_1_0_V_fu_152,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_1_0_V_5_fu_1258_p6);

    digitrec_mux_42_6g8j_U93 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_1_1_V_fu_156,
        din1 => ap_const_lv6_32,
        din2 => knn_set_1_1_1_V_fu_156,
        din3 => knn_set_1_1_1_V_fu_156,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_1_1_V_5_fu_1271_p6);

    digitrec_mux_42_6g8j_U94 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_1_2_V_fu_160,
        din1 => knn_set_1_1_2_V_fu_160,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_1_2_V_5_fu_1284_p6);

    digitrec_mux_42_6g8j_U95 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_1_0_0_V_fu_140,
        din2 => knn_set_1_0_0_V_fu_140,
        din3 => knn_set_1_0_0_V_fu_140,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_0_0_V_5_fu_1312_p6);

    digitrec_mux_42_6g8j_U96 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_0_1_V_fu_144,
        din1 => ap_const_lv6_32,
        din2 => knn_set_1_0_1_V_fu_144,
        din3 => knn_set_1_0_1_V_fu_144,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_0_1_V_5_fu_1325_p6);

    digitrec_mux_42_6g8j_U97 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_0_2_V_fu_148,
        din1 => knn_set_1_0_2_V_fu_148,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_0_2_V_5_fu_1338_p6);

    digitrec_mux_42_6g8j_U98 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_1_2_0_V_fu_164,
        din2 => knn_set_1_2_0_V_fu_164,
        din3 => knn_set_1_2_0_V_fu_164,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_2_0_V_5_fu_1366_p6);

    digitrec_mux_42_6g8j_U99 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_2_1_V_fu_168,
        din1 => ap_const_lv6_32,
        din2 => knn_set_1_2_1_V_fu_168,
        din3 => knn_set_1_2_1_V_fu_168,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_2_1_V_5_fu_1379_p6);

    digitrec_mux_42_6g8j_U100 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_2_2_V_fu_172,
        din1 => knn_set_1_2_2_V_fu_172,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_1_2_2_V_5_fu_1392_p6);

    digitrec_mux_42_6g8j_U101 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_0_1_0_V_fu_108,
        din2 => knn_set_0_1_0_V_fu_108,
        din3 => knn_set_0_1_0_V_fu_108,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_1_0_V_5_fu_1420_p6);

    digitrec_mux_42_6g8j_U102 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_1_1_V_fu_112,
        din1 => ap_const_lv6_32,
        din2 => knn_set_0_1_1_V_fu_112,
        din3 => knn_set_0_1_1_V_fu_112,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_1_1_V_5_fu_1433_p6);

    digitrec_mux_42_6g8j_U103 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_1_2_V_fu_116,
        din1 => knn_set_0_1_2_V_fu_116,
        din2 => ap_const_lv6_32,
        din3 => knn_set_0_1_2_V_fu_116,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_1_2_V_5_fu_1446_p6);

    digitrec_mux_42_6g8j_U104 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_1_3_V_fu_120,
        din1 => knn_set_0_1_3_V_fu_120,
        din2 => knn_set_0_1_3_V_fu_120,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_1_3_V_5_fu_1459_p6);

    digitrec_mux_42_6g8j_U105 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_0_0_0_V_fu_92,
        din2 => knn_set_0_0_0_V_fu_92,
        din3 => knn_set_0_0_0_V_fu_92,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_0_0_V_5_fu_1492_p6);

    digitrec_mux_42_6g8j_U106 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_0_1_V_fu_96,
        din1 => ap_const_lv6_32,
        din2 => knn_set_0_0_1_V_fu_96,
        din3 => knn_set_0_0_1_V_fu_96,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_0_1_V_5_fu_1505_p6);

    digitrec_mux_42_6g8j_U107 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_0_2_V_fu_100,
        din1 => knn_set_0_0_2_V_fu_100,
        din2 => ap_const_lv6_32,
        din3 => knn_set_0_0_2_V_fu_100,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_0_2_V_5_fu_1518_p6);

    digitrec_mux_42_6g8j_U108 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_0_3_V_fu_104,
        din1 => knn_set_0_0_3_V_fu_104,
        din2 => knn_set_0_0_3_V_fu_104,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_0_3_V_5_fu_1531_p6);

    digitrec_mux_42_6g8j_U109 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_0_2_0_V_fu_124,
        din2 => knn_set_0_2_0_V_fu_124,
        din3 => knn_set_0_2_0_V_fu_124,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_2_0_V_5_fu_1564_p6);

    digitrec_mux_42_6g8j_U110 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_2_1_V_fu_128,
        din1 => ap_const_lv6_32,
        din2 => knn_set_0_2_1_V_fu_128,
        din3 => knn_set_0_2_1_V_fu_128,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_2_1_V_5_fu_1577_p6);

    digitrec_mux_42_6g8j_U111 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_2_2_V_fu_132,
        din1 => knn_set_0_2_2_V_fu_132,
        din2 => ap_const_lv6_32,
        din3 => knn_set_0_2_2_V_fu_132,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_2_2_V_5_fu_1590_p6);

    digitrec_mux_42_6g8j_U112 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_2_3_V_fu_136,
        din1 => knn_set_0_2_3_V_fu_136,
        din2 => knn_set_0_2_3_V_fu_136,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_0_2_3_V_5_fu_1603_p6);

    digitrec_mux_42_6g8j_U113 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_2_1_0_V_fu_188,
        din2 => knn_set_2_1_0_V_fu_188,
        din3 => knn_set_2_1_0_V_fu_188,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_1_0_V_5_fu_1636_p6);

    digitrec_mux_42_6g8j_U114 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_1_1_V_fu_192,
        din1 => ap_const_lv6_32,
        din2 => knn_set_2_1_1_V_fu_192,
        din3 => knn_set_2_1_1_V_fu_192,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_1_1_V_5_fu_1649_p6);

    digitrec_mux_42_6g8j_U115 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_1_2_V_fu_196,
        din1 => knn_set_2_1_2_V_fu_196,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_1_2_V_5_fu_1662_p6);

    digitrec_mux_42_6g8j_U116 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_2_0_0_V_fu_176,
        din2 => knn_set_2_0_0_V_fu_176,
        din3 => knn_set_2_0_0_V_fu_176,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_0_0_V_5_fu_1690_p6);

    digitrec_mux_42_6g8j_U117 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_0_1_V_fu_180,
        din1 => ap_const_lv6_32,
        din2 => knn_set_2_0_1_V_fu_180,
        din3 => knn_set_2_0_1_V_fu_180,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_0_1_V_5_fu_1703_p6);

    digitrec_mux_42_6g8j_U118 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_0_2_V_fu_184,
        din1 => knn_set_2_0_2_V_fu_184,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_0_2_V_5_fu_1716_p6);

    digitrec_mux_42_6g8j_U119 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_2_2_0_V_fu_200,
        din2 => knn_set_2_2_0_V_fu_200,
        din3 => knn_set_2_2_0_V_fu_200,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_2_0_V_5_fu_1744_p6);

    digitrec_mux_42_6g8j_U120 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_2_1_V_fu_204,
        din1 => ap_const_lv6_32,
        din2 => knn_set_2_2_1_V_fu_204,
        din3 => knn_set_2_2_1_V_fu_204,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_2_1_V_5_fu_1757_p6);

    digitrec_mux_42_6g8j_U121 : component digitrec_mux_42_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_2_2_V_fu_208,
        din1 => knn_set_2_2_2_V_fu_208,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => newIndex_t_reg_2305,
        dout => knn_set_2_2_2_V_5_fu_1770_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_reg_653_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i4_reg_653 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i4_reg_653 <= i_2_reg_2378;
            end if; 
        end if;
    end process;

    i_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_308 <= i_1_reg_2296;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_308 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_reg_342 <= k_1_reg_2342;
            elsif (((exitcond1_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_342 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    knn_set_0_0_0_V_3_reg_643_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_0_0_V_3_reg_643 <= knn_set_0_0_0_V_fu_92;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_0_0_V_3_reg_643 <= grp_update_knn_fu_664_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_0_0_1_V_3_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_0_1_V_3_reg_633 <= knn_set_0_0_1_V_fu_96;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_0_1_V_3_reg_633 <= grp_update_knn_fu_664_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_0_0_2_V_3_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_0_2_V_3_reg_623 <= knn_set_0_0_2_V_fu_100;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_0_2_V_3_reg_623 <= grp_update_knn_fu_664_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_0_0_3_V_3_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_0_3_V_3_reg_613 <= knn_set_0_0_3_V_fu_104;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_0_3_V_3_reg_613 <= grp_update_knn_fu_664_ap_return_3;
            end if; 
        end if;
    end process;

    knn_set_0_1_0_V_3_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_1_0_V_3_reg_603 <= knn_set_0_1_0_V_fu_108;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_1_0_V_3_reg_603 <= grp_update_knn_fu_664_ap_return_4;
            end if; 
        end if;
    end process;

    knn_set_0_1_1_V_3_reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_1_1_V_3_reg_593 <= knn_set_0_1_1_V_fu_112;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_1_1_V_3_reg_593 <= grp_update_knn_fu_664_ap_return_5;
            end if; 
        end if;
    end process;

    knn_set_0_1_2_V_3_reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_1_2_V_3_reg_583 <= knn_set_0_1_2_V_fu_116;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_1_2_V_3_reg_583 <= grp_update_knn_fu_664_ap_return_6;
            end if; 
        end if;
    end process;

    knn_set_0_1_3_V_3_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_1_3_V_3_reg_573 <= knn_set_0_1_3_V_fu_120;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_1_3_V_3_reg_573 <= grp_update_knn_fu_664_ap_return_7;
            end if; 
        end if;
    end process;

    knn_set_0_2_0_V_3_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_2_0_V_3_reg_563 <= knn_set_0_2_0_V_fu_124;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_2_0_V_3_reg_563 <= grp_update_knn_fu_664_ap_return_8;
            end if; 
        end if;
    end process;

    knn_set_0_2_1_V_3_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_2_1_V_3_reg_553 <= knn_set_0_2_1_V_fu_128;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_2_1_V_3_reg_553 <= grp_update_knn_fu_664_ap_return_9;
            end if; 
        end if;
    end process;

    knn_set_0_2_2_V_3_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_2_2_V_3_reg_543 <= knn_set_0_2_2_V_fu_132;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_2_2_V_3_reg_543 <= grp_update_knn_fu_664_ap_return_10;
            end if; 
        end if;
    end process;

    knn_set_0_2_3_V_3_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_2_3_V_3_reg_533 <= knn_set_0_2_3_V_fu_136;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_0_2_3_V_3_reg_533 <= grp_update_knn_fu_664_ap_return_11;
            end if; 
        end if;
    end process;

    knn_set_1_0_0_V_3_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_0_0_V_3_reg_523 <= knn_set_1_0_0_V_fu_140;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_0_0_V_3_reg_523 <= reg_1046;
            end if; 
        end if;
    end process;

    knn_set_1_0_1_V_3_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_0_1_V_3_reg_513 <= knn_set_1_0_1_V_fu_144;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_0_1_V_3_reg_513 <= reg_1052;
            end if; 
        end if;
    end process;

    knn_set_1_0_2_V_3_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_0_2_V_3_reg_503 <= knn_set_1_0_2_V_fu_148;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_0_2_V_3_reg_503 <= reg_1058;
            end if; 
        end if;
    end process;

    knn_set_1_1_0_V_3_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_1_0_V_3_reg_493 <= knn_set_1_1_0_V_fu_152;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_1_0_V_3_reg_493 <= reg_1064;
            end if; 
        end if;
    end process;

    knn_set_1_1_1_V_3_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_1_1_V_3_reg_483 <= knn_set_1_1_1_V_fu_156;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_1_1_V_3_reg_483 <= reg_1070;
            end if; 
        end if;
    end process;

    knn_set_1_1_2_V_3_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_1_2_V_3_reg_473 <= knn_set_1_1_2_V_fu_160;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_1_2_V_3_reg_473 <= reg_1076;
            end if; 
        end if;
    end process;

    knn_set_1_2_0_V_3_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_2_0_V_3_reg_463 <= knn_set_1_2_0_V_fu_164;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_2_0_V_3_reg_463 <= reg_1082;
            end if; 
        end if;
    end process;

    knn_set_1_2_1_V_3_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_2_1_V_3_reg_453 <= knn_set_1_2_1_V_fu_168;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_2_1_V_3_reg_453 <= reg_1088;
            end if; 
        end if;
    end process;

    knn_set_1_2_2_V_3_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_2_2_V_3_reg_443 <= knn_set_1_2_2_V_fu_172;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_1_2_2_V_3_reg_443 <= reg_1094;
            end if; 
        end if;
    end process;

    knn_set_2_0_0_V_3_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_0_0_V_3_reg_433 <= knn_set_2_0_0_V_fu_176;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_0_0_V_3_reg_433 <= reg_1100;
            end if; 
        end if;
    end process;

    knn_set_2_0_1_V_3_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_0_1_V_3_reg_423 <= knn_set_2_0_1_V_fu_180;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_0_1_V_3_reg_423 <= reg_1106;
            end if; 
        end if;
    end process;

    knn_set_2_0_2_V_3_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_0_2_V_3_reg_413 <= knn_set_2_0_2_V_fu_184;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_0_2_V_3_reg_413 <= reg_1112;
            end if; 
        end if;
    end process;

    knn_set_2_1_0_V_3_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_1_0_V_3_reg_403 <= knn_set_2_1_0_V_fu_188;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_1_0_V_3_reg_403 <= reg_1118;
            end if; 
        end if;
    end process;

    knn_set_2_1_1_V_3_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_1_1_V_3_reg_393 <= knn_set_2_1_1_V_fu_192;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_1_1_V_3_reg_393 <= reg_1124;
            end if; 
        end if;
    end process;

    knn_set_2_1_2_V_3_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_1_2_V_3_reg_383 <= knn_set_2_1_2_V_fu_196;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_1_2_V_3_reg_383 <= reg_1130;
            end if; 
        end if;
    end process;

    knn_set_2_2_0_V_3_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_2_0_V_3_reg_373 <= knn_set_2_2_0_V_fu_200;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_2_0_V_3_reg_373 <= reg_1136;
            end if; 
        end if;
    end process;

    knn_set_2_2_1_V_3_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_2_1_V_3_reg_363 <= knn_set_2_2_1_V_fu_204;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_2_1_V_3_reg_363 <= reg_1142;
            end if; 
        end if;
    end process;

    knn_set_2_2_2_V_3_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_2_2_V_3_reg_353 <= knn_set_2_2_2_V_fu_208;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                knn_set_2_2_2_V_3_reg_353 <= reg_1148;
            end if; 
        end if;
    end process;

    phi_mul_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_319 <= next_mul_reg_2288;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_319 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_urem_reg_330 <= idx_urem_fu_1810_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_urem_reg_330 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_1034_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_1034 <= training_data_V_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_1034 <= training_data_V_q1;
            end if; 
        end if;
    end process;

    reg_1040_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_1040 <= training_data_V_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_1040 <= training_data_V_q2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    i4_cast1_reg_2352(10 downto 0) <= i4_cast1_fu_1818_p1(10 downto 0);
                    i4_cast225_cast1_reg_2364(10 downto 0) <= i4_cast225_cast1_fu_1826_p1(10 downto 0);
                    i4_cast225_cast_reg_2369(10 downto 0) <= i4_cast225_cast_fu_1830_p1(10 downto 0);
                    i4_cast2_reg_2357(10 downto 0) <= i4_cast2_fu_1822_p1(10 downto 0);
                i_2_reg_2378 <= i_2_fu_1840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_2296 <= i_1_fu_1226_p2;
                next_mul_reg_2288 <= next_mul_fu_1214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_1_reg_2342 <= k_1_fu_1252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_0) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (tmp_reg_2301 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_0_0_0_V_fu_92 <= knn_set_0_0_0_V_5_fu_1492_p6;
                knn_set_0_0_1_V_fu_96 <= knn_set_0_0_1_V_5_fu_1505_p6;
                knn_set_0_0_2_V_fu_100 <= knn_set_0_0_2_V_5_fu_1518_p6;
                knn_set_0_0_3_V_fu_104 <= knn_set_0_0_3_V_5_fu_1531_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_1) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (tmp_reg_2301 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_0_1_0_V_fu_108 <= knn_set_0_1_0_V_5_fu_1420_p6;
                knn_set_0_1_1_V_fu_112 <= knn_set_0_1_1_V_5_fu_1433_p6;
                knn_set_0_1_2_V_fu_116 <= knn_set_0_1_2_V_5_fu_1446_p6;
                knn_set_0_1_3_V_fu_120 <= knn_set_0_1_3_V_5_fu_1459_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_1)) and not((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_0)) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (tmp_reg_2301 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_0_2_0_V_fu_124 <= knn_set_0_2_0_V_5_fu_1564_p6;
                knn_set_0_2_1_V_fu_128 <= knn_set_0_2_1_V_5_fu_1577_p6;
                knn_set_0_2_2_V_fu_132 <= knn_set_0_2_2_V_5_fu_1590_p6;
                knn_set_0_2_3_V_fu_136 <= knn_set_0_2_3_V_5_fu_1603_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_0) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (tmp_reg_2301 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_1_0_0_V_fu_140 <= knn_set_1_0_0_V_5_fu_1312_p6;
                knn_set_1_0_1_V_fu_144 <= knn_set_1_0_1_V_5_fu_1325_p6;
                knn_set_1_0_2_V_fu_148 <= knn_set_1_0_2_V_5_fu_1338_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_1) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (tmp_reg_2301 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_1_1_0_V_fu_152 <= knn_set_1_1_0_V_5_fu_1258_p6;
                knn_set_1_1_1_V_fu_156 <= knn_set_1_1_1_V_5_fu_1271_p6;
                knn_set_1_1_2_V_fu_160 <= knn_set_1_1_2_V_5_fu_1284_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_1)) and not((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_0)) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (tmp_reg_2301 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_1_2_0_V_fu_164 <= knn_set_1_2_0_V_5_fu_1366_p6;
                knn_set_1_2_1_V_fu_168 <= knn_set_1_2_1_V_5_fu_1379_p6;
                knn_set_1_2_2_V_fu_172 <= knn_set_1_2_2_V_5_fu_1392_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_reg_2301 = ap_const_lv3_1)) and not((tmp_reg_2301 = ap_const_lv3_0)) and (ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_0) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_2_0_0_V_fu_176 <= knn_set_2_0_0_V_5_fu_1690_p6;
                knn_set_2_0_1_V_fu_180 <= knn_set_2_0_1_V_5_fu_1703_p6;
                knn_set_2_0_2_V_fu_184 <= knn_set_2_0_2_V_5_fu_1716_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_reg_2301 = ap_const_lv3_1)) and not((tmp_reg_2301 = ap_const_lv3_0)) and (ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_1) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_2_1_0_V_fu_188 <= knn_set_2_1_0_V_5_fu_1636_p6;
                knn_set_2_1_1_V_fu_192 <= knn_set_2_1_1_V_5_fu_1649_p6;
                knn_set_2_1_2_V_fu_196 <= knn_set_2_1_2_V_5_fu_1662_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_reg_2301 = ap_const_lv3_1)) and not((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_1)) and not((ap_phi_mux_k_phi_fu_346_p4 = ap_const_lv2_0)) and not((tmp_reg_2301 = ap_const_lv3_0)) and (exitcond3_fu_1246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                knn_set_2_2_0_V_fu_200 <= knn_set_2_2_0_V_5_fu_1744_p6;
                knn_set_2_2_1_V_fu_204 <= knn_set_2_2_1_V_5_fu_1757_p6;
                knn_set_2_2_2_V_fu_208 <= knn_set_2_2_2_V_5_fu_1770_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                newIndex_t_reg_2305 <= phi_mul_reg_319(7 downto 6);
                tmp_reg_2301 <= tmp_fu_1232_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_1029 <= training_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_1046 <= grp_update_knn_1_fu_699_ap_return_0;
                reg_1052 <= grp_update_knn_1_fu_699_ap_return_1;
                reg_1058 <= grp_update_knn_1_fu_699_ap_return_2;
                reg_1064 <= grp_update_knn_1_fu_699_ap_return_3;
                reg_1070 <= grp_update_knn_1_fu_699_ap_return_4;
                reg_1076 <= grp_update_knn_1_fu_699_ap_return_5;
                reg_1082 <= grp_update_knn_1_fu_699_ap_return_6;
                reg_1088 <= grp_update_knn_1_fu_699_ap_return_7;
                reg_1094 <= grp_update_knn_1_fu_699_ap_return_8;
                reg_1100 <= grp_update_knn_1_fu_725_ap_return_0;
                reg_1106 <= grp_update_knn_1_fu_725_ap_return_1;
                reg_1112 <= grp_update_knn_1_fu_725_ap_return_2;
                reg_1118 <= grp_update_knn_1_fu_725_ap_return_3;
                reg_1124 <= grp_update_knn_1_fu_725_ap_return_4;
                reg_1130 <= grp_update_knn_1_fu_725_ap_return_5;
                reg_1136 <= grp_update_knn_1_fu_725_ap_return_6;
                reg_1142 <= grp_update_knn_1_fu_725_ap_return_7;
                reg_1148 <= grp_update_knn_1_fu_725_ap_return_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_1154 <= grp_update_knn_fu_664_ap_return_0;
                reg_1159 <= grp_update_knn_fu_664_ap_return_1;
                reg_1164 <= grp_update_knn_fu_664_ap_return_2;
                reg_1169 <= grp_update_knn_fu_664_ap_return_3;
                reg_1174 <= grp_update_knn_fu_664_ap_return_4;
                reg_1179 <= grp_update_knn_fu_664_ap_return_5;
                reg_1184 <= grp_update_knn_fu_664_ap_return_6;
                reg_1189 <= grp_update_knn_fu_664_ap_return_7;
                reg_1194 <= grp_update_knn_fu_664_ap_return_8;
                reg_1199 <= grp_update_knn_fu_664_ap_return_9;
                reg_1204 <= grp_update_knn_fu_664_ap_return_10;
                reg_1209 <= grp_update_knn_fu_664_ap_return_11;
            end if;
        end if;
    end process;
    i4_cast1_reg_2352(14 downto 11) <= "0000";
    i4_cast2_reg_2357(13 downto 11) <= "000";
    i4_cast225_cast1_reg_2364(11) <= '0';
    i4_cast225_cast_reg_2369(12 downto 11) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_1220_p2, ap_CS_fsm_state3, exitcond3_fu_1246_p2, ap_CS_fsm_state5, exitcond2_fu_1834_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_1220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_1834_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_k_phi_fu_346_p4 <= k_reg_342;

    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_knn_vote_fu_755_ap_return;
    exitcond1_fu_1220_p2 <= "1" when (i_reg_308 = ap_const_lv4_A) else "0";
    exitcond2_fu_1834_p2 <= "1" when (i4_reg_653 = ap_const_lv11_708) else "0";
    exitcond3_fu_1246_p2 <= "1" when (k_reg_342 = ap_const_lv2_3) else "0";

    grp_update_knn_1_fu_699_ap_ce_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_update_knn_1_fu_699_ap_ce <= ap_const_logic_1;
        else 
            grp_update_knn_1_fu_699_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V12_read_assign_proc : process(reg_1052, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_0_1_V_3_reg_513)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V12_read <= reg_1052;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V12_read <= knn_set_1_0_1_V_3_reg_513;
        else 
            grp_update_knn_1_fu_699_min_distances_V12_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V13_read_assign_proc : process(reg_1064, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_1_0_V_3_reg_493)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V13_read <= reg_1064;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V13_read <= knn_set_1_1_0_V_3_reg_493;
        else 
            grp_update_knn_1_fu_699_min_distances_V13_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V14_read_assign_proc : process(reg_1070, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_1_1_V_3_reg_483)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V14_read <= reg_1070;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V14_read <= knn_set_1_1_1_V_3_reg_483;
        else 
            grp_update_knn_1_fu_699_min_distances_V14_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V15_read_assign_proc : process(reg_1076, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_1_2_V_3_reg_473)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V15_read <= reg_1076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V15_read <= knn_set_1_1_2_V_3_reg_473;
        else 
            grp_update_knn_1_fu_699_min_distances_V15_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V26_read_assign_proc : process(reg_1082, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_2_0_V_3_reg_463)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V26_read <= reg_1082;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V26_read <= knn_set_1_2_0_V_3_reg_463;
        else 
            grp_update_knn_1_fu_699_min_distances_V26_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V27_read_assign_proc : process(reg_1088, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_2_1_V_3_reg_453)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V27_read <= reg_1088;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V27_read <= knn_set_1_2_1_V_3_reg_453;
        else 
            grp_update_knn_1_fu_699_min_distances_V27_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V28_read_assign_proc : process(reg_1094, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_2_2_V_3_reg_443)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V28_read <= reg_1094;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V28_read <= knn_set_1_2_2_V_3_reg_443;
        else 
            grp_update_knn_1_fu_699_min_distances_V28_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V2_read_assign_proc : process(reg_1058, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_0_2_V_3_reg_503)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V2_read <= reg_1058;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V2_read <= knn_set_1_0_2_V_3_reg_503;
        else 
            grp_update_knn_1_fu_699_min_distances_V2_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V_offset_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_update_knn_1_fu_699_min_distances_V_offset <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_update_knn_1_fu_699_min_distances_V_offset <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V_offset <= ap_const_lv4_0;
        else 
            grp_update_knn_1_fu_699_min_distances_V_offset <= "XXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_699_min_distances_V_read_assign_proc : process(reg_1046, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_1_0_0_V_3_reg_523)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_699_min_distances_V_read <= reg_1046;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_699_min_distances_V_read <= knn_set_1_0_0_V_3_reg_523;
        else 
            grp_update_knn_1_fu_699_min_distances_V_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_ap_ce_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_update_knn_1_fu_725_ap_ce <= ap_const_logic_1;
        else 
            grp_update_knn_1_fu_725_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V12_read_assign_proc : process(reg_1106, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_0_1_V_3_reg_423)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V12_read <= reg_1106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V12_read <= knn_set_2_0_1_V_3_reg_423;
        else 
            grp_update_knn_1_fu_725_min_distances_V12_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V13_read_assign_proc : process(reg_1118, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_1_0_V_3_reg_403)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V13_read <= reg_1118;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V13_read <= knn_set_2_1_0_V_3_reg_403;
        else 
            grp_update_knn_1_fu_725_min_distances_V13_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V14_read_assign_proc : process(reg_1124, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_1_1_V_3_reg_393)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V14_read <= reg_1124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V14_read <= knn_set_2_1_1_V_3_reg_393;
        else 
            grp_update_knn_1_fu_725_min_distances_V14_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V15_read_assign_proc : process(reg_1130, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_1_2_V_3_reg_383)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V15_read <= reg_1130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V15_read <= knn_set_2_1_2_V_3_reg_383;
        else 
            grp_update_knn_1_fu_725_min_distances_V15_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V26_read_assign_proc : process(reg_1136, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_2_0_V_3_reg_373)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V26_read <= reg_1136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V26_read <= knn_set_2_2_0_V_3_reg_373;
        else 
            grp_update_knn_1_fu_725_min_distances_V26_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V27_read_assign_proc : process(reg_1142, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_2_1_V_3_reg_363)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V27_read <= reg_1142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V27_read <= knn_set_2_2_1_V_3_reg_363;
        else 
            grp_update_knn_1_fu_725_min_distances_V27_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V28_read_assign_proc : process(reg_1148, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_2_2_V_3_reg_353)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V28_read <= reg_1148;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V28_read <= knn_set_2_2_2_V_3_reg_353;
        else 
            grp_update_knn_1_fu_725_min_distances_V28_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V2_read_assign_proc : process(reg_1112, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_0_2_V_3_reg_413)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V2_read <= reg_1112;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V2_read <= knn_set_2_0_2_V_3_reg_413;
        else 
            grp_update_knn_1_fu_725_min_distances_V2_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V_offset_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_update_knn_1_fu_725_min_distances_V_offset <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_update_knn_1_fu_725_min_distances_V_offset <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V_offset <= ap_const_lv4_0;
        else 
            grp_update_knn_1_fu_725_min_distances_V_offset <= "XXXX";
        end if; 
    end process;


    grp_update_knn_1_fu_725_min_distances_V_read_assign_proc : process(reg_1100, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, knn_set_2_0_0_V_3_reg_433)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_update_knn_1_fu_725_min_distances_V_read <= reg_1100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_1_fu_725_min_distances_V_read <= knn_set_2_0_0_V_3_reg_433;
        else 
            grp_update_knn_1_fu_725_min_distances_V_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_update_knn_fu_664_ap_ce <= ap_const_logic_0;
        else 
            grp_update_knn_fu_664_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V12_read_assign_proc : process(reg_1159, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_0_1_V_3_reg_633)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V12_read <= reg_1159;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V12_read <= knn_set_0_0_1_V_3_reg_633;
        else 
            grp_update_knn_fu_664_min_distances_V12_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V14_read_assign_proc : process(reg_1174, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_1_0_V_3_reg_603)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V14_read <= reg_1174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V14_read <= knn_set_0_1_0_V_3_reg_603;
        else 
            grp_update_knn_fu_664_min_distances_V14_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V15_read_assign_proc : process(reg_1179, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_1_1_V_3_reg_593)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V15_read <= reg_1179;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V15_read <= knn_set_0_1_1_V_3_reg_593;
        else 
            grp_update_knn_fu_664_min_distances_V15_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V16_read_assign_proc : process(reg_1184, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_1_2_V_3_reg_583)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V16_read <= reg_1184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V16_read <= knn_set_0_1_2_V_3_reg_583;
        else 
            grp_update_knn_fu_664_min_distances_V16_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V17_read_assign_proc : process(reg_1189, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_1_3_V_3_reg_573)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V17_read <= reg_1189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V17_read <= knn_set_0_1_3_V_3_reg_573;
        else 
            grp_update_knn_fu_664_min_distances_V17_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V210_read_assign_proc : process(reg_1204, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_2_2_V_3_reg_543)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V210_read <= reg_1204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V210_read <= knn_set_0_2_2_V_3_reg_543;
        else 
            grp_update_knn_fu_664_min_distances_V210_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V211_read_assign_proc : process(reg_1209, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_2_3_V_3_reg_533)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V211_read <= reg_1209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V211_read <= knn_set_0_2_3_V_3_reg_533;
        else 
            grp_update_knn_fu_664_min_distances_V211_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V28_read_assign_proc : process(reg_1194, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_2_0_V_3_reg_563)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V28_read <= reg_1194;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V28_read <= knn_set_0_2_0_V_3_reg_563;
        else 
            grp_update_knn_fu_664_min_distances_V28_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V29_read_assign_proc : process(reg_1199, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_2_1_V_3_reg_553)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V29_read <= reg_1199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V29_read <= knn_set_0_2_1_V_3_reg_553;
        else 
            grp_update_knn_fu_664_min_distances_V29_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V2_read_assign_proc : process(reg_1164, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_0_2_V_3_reg_623)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V2_read <= reg_1164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V2_read <= knn_set_0_0_2_V_3_reg_623;
        else 
            grp_update_knn_fu_664_min_distances_V2_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V3_read_assign_proc : process(reg_1169, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_0_3_V_3_reg_613)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V3_read <= reg_1169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V3_read <= knn_set_0_0_3_V_3_reg_613;
        else 
            grp_update_knn_fu_664_min_distances_V3_read <= "XXXXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V_offset_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_update_knn_fu_664_min_distances_V_offset <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_update_knn_fu_664_min_distances_V_offset <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_update_knn_fu_664_min_distances_V_offset <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V_offset <= ap_const_lv4_0;
        else 
            grp_update_knn_fu_664_min_distances_V_offset <= "XXXX";
        end if; 
    end process;


    grp_update_knn_fu_664_min_distances_V_read_assign_proc : process(reg_1154, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, knn_set_0_0_0_V_3_reg_643)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_update_knn_fu_664_min_distances_V_read <= reg_1154;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_update_knn_fu_664_min_distances_V_read <= knn_set_0_0_0_V_3_reg_643;
        else 
            grp_update_knn_fu_664_min_distances_V_read <= "XXXXXX";
        end if; 
    end process;

    i4_cast1_fu_1818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_653),15));
    i4_cast225_cast1_fu_1826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_653),12));
    i4_cast225_cast_fu_1830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_653),13));
    i4_cast2_fu_1822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_653),14));
    i_1_fu_1226_p2 <= std_logic_vector(unsigned(i_reg_308) + unsigned(ap_const_lv4_1));
    i_2_fu_1840_p2 <= std_logic_vector(unsigned(i4_reg_653) + unsigned(ap_const_lv11_1));
    idx_urem_fu_1810_p3 <= 
        next_urem_fu_1798_p2 when (tmp_106_fu_1804_p2(0) = '1') else 
        ap_const_lv4_0;
    k_1_fu_1252_p2 <= std_logic_vector(unsigned(k_reg_342) + unsigned(ap_const_lv2_1));
    next_mul_fu_1214_p2 <= std_logic_vector(unsigned(phi_mul_reg_319) + unsigned(ap_const_lv8_16));
    next_urem_fu_1798_p2 <= std_logic_vector(unsigned(phi_urem_reg_330) + unsigned(ap_const_lv4_1));
    tmp_106_fu_1804_p2 <= "1" when (unsigned(next_urem_fu_1798_p2) < unsigned(ap_const_lv4_3)) else "0";
    tmp_3_1_fu_1851_p2 <= std_logic_vector(unsigned(i4_cast225_cast1_fu_1826_p1) + unsigned(ap_const_lv12_708));
    tmp_3_2_fu_1862_p2 <= std_logic_vector(unsigned(i4_cast225_cast_fu_1830_p1) + unsigned(ap_const_lv13_E10));
    tmp_3_3_fu_1893_p2 <= std_logic_vector(unsigned(i4_cast225_cast_reg_2369) + unsigned(ap_const_lv13_1518));
    tmp_3_4_fu_1873_p2 <= std_logic_vector(unsigned(i4_cast2_reg_2357) + unsigned(ap_const_lv14_1C20));
    tmp_3_5_fu_1883_p2 <= std_logic_vector(unsigned(i4_cast2_reg_2357) + unsigned(ap_const_lv14_2328));
    tmp_3_6_fu_1931_p2 <= std_logic_vector(unsigned(i4_cast2_reg_2357) + unsigned(ap_const_lv14_2A30));
        tmp_3_7_cast_fu_1908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_7_fu_1903_p2),14));

    tmp_3_7_fu_1903_p2 <= std_logic_vector(unsigned(i4_cast225_cast_reg_2369) + unsigned(ap_const_lv13_1138));
        tmp_3_8_cast_fu_1922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_8_fu_1917_p2),14));

    tmp_3_8_fu_1917_p2 <= std_logic_vector(unsigned(i4_cast225_cast1_reg_2364) + unsigned(ap_const_lv12_840));
    tmp_3_9_fu_1941_p2 <= std_logic_vector(unsigned(i4_cast1_reg_2352) + unsigned(ap_const_lv15_3F48));
    tmp_4_1_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_1_fu_1851_p2),64));
    tmp_4_2_fu_1868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_2_fu_1862_p2),64));
    tmp_4_3_fu_1898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_3_fu_1893_p2),64));
    tmp_4_4_fu_1878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_4_fu_1873_p2),64));
    tmp_4_5_fu_1888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_5_fu_1883_p2),64));
    tmp_4_6_fu_1936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_6_fu_1931_p2),64));
    tmp_4_7_fu_1912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_7_cast_fu_1908_p1),64));
    tmp_4_8_fu_1926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_8_cast_fu_1922_p1),64));
    tmp_4_9_fu_1946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_9_fu_1941_p2),64));
    tmp_4_fu_1846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_653),64));
    tmp_fu_1232_p1 <= phi_urem_reg_330(3 - 1 downto 0);

    training_data_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, tmp_4_fu_1846_p1, tmp_4_4_fu_1878_p1, tmp_4_3_fu_1898_p1, tmp_4_6_fu_1936_p1, tmp_4_9_fu_1946_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            training_data_V_address0 <= tmp_4_9_fu_1946_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            training_data_V_address0 <= tmp_4_6_fu_1936_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            training_data_V_address0 <= tmp_4_3_fu_1898_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            training_data_V_address0 <= tmp_4_4_fu_1878_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_address0 <= tmp_4_fu_1846_p1(15 - 1 downto 0);
        else 
            training_data_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_data_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, tmp_4_1_fu_1857_p1, tmp_4_5_fu_1888_p1, tmp_4_7_fu_1912_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            training_data_V_address1 <= tmp_4_7_fu_1912_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            training_data_V_address1 <= tmp_4_5_fu_1888_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_address1 <= tmp_4_1_fu_1857_p1(15 - 1 downto 0);
        else 
            training_data_V_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_data_V_address2_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, tmp_4_2_fu_1868_p1, tmp_4_8_fu_1926_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            training_data_V_address2 <= tmp_4_8_fu_1926_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_address2 <= tmp_4_2_fu_1868_p1(15 - 1 downto 0);
        else 
            training_data_V_address2 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_data_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            training_data_V_ce0 <= ap_const_logic_1;
        else 
            training_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_data_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            training_data_V_ce1 <= ap_const_logic_1;
        else 
            training_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    training_data_V_ce2_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            training_data_V_ce2 <= ap_const_logic_1;
        else 
            training_data_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
