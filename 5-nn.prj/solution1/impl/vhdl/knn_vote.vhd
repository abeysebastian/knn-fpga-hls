-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knn_vote is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    knn_set_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    knn_set_V_ce0 : OUT STD_LOGIC;
    knn_set_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of knn_vote is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal digit_recognized_cas_fu_102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_recognized_cas_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_112_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_213 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_134_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_218 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond7_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_150_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_226 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_distances_1_min_s_fu_180_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_digit_recognized_fu_188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_distances_fu_199_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal min_sum_distances_reg_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_recognized_reg_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_sum_distances_1_reg_79 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_91 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_cast_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_122_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_118_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_130_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast_fu_156_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_160_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal min_sum_distances_1_s_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_195_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_140_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if (((exitcond7_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= tmp_6_fu_140_p1;
                end if; 
            end if;
        end if;
    end process;


    digit_recognized_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                digit_recognized_reg_68 <= i_reg_213;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                digit_recognized_reg_68 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_91 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_91 <= j_1_reg_226;
            end if; 
        end if;
    end process;

    min_sum_distances_1_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                min_sum_distances_1_reg_79 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                min_sum_distances_1_reg_79 <= sum_distances_fu_199_p2;
            end if; 
        end if;
    end process;

    min_sum_distances_reg_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                min_sum_distances_reg_44 <= sum_distances_1_min_s_fu_180_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_sum_distances_reg_44 <= ap_const_lv32_FA;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    digit_recognized_cas_reg_205(3 downto 0) <= digit_recognized_cas_fu_102_p1(3 downto 0);
                i_reg_213 <= i_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_226 <= j_1_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_4_reg_218 <= tmp_4_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                val_assign_reg_56 <= i_0_digit_recognized_fu_188_p3;
            end if;
        end if;
    end process;
    digit_recognized_cas_reg_205(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_106_p2, ap_CS_fsm_state3, exitcond_fu_144_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_106_p2)
    begin
        if ((((exitcond7_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_106_p2)
    begin
        if (((exitcond7_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_106_p2, tmp_6_fu_140_p1, ap_return_preg)
    begin
        if (((exitcond7_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= tmp_6_fu_140_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    digit_recognized_cas_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(digit_recognized_reg_68),32));
    exitcond7_fu_106_p2 <= "1" when (digit_recognized_reg_68 = ap_const_lv4_A) else "0";
    exitcond_fu_144_p2 <= "1" when (j_reg_91 = ap_const_lv3_5) else "0";
    i_0_digit_recognized_fu_188_p3 <= 
        digit_recognized_cas_reg_205 when (tmp_1_fu_174_p2(0) = '1') else 
        val_assign_reg_56;
    i_fu_112_p2 <= std_logic_vector(unsigned(digit_recognized_reg_68) + unsigned(ap_const_lv4_1));
    j_1_fu_150_p2 <= std_logic_vector(unsigned(j_reg_91) + unsigned(ap_const_lv3_1));
    knn_set_V_address0 <= tmp_5_cast_fu_165_p1(6 - 1 downto 0);

    knn_set_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            knn_set_V_ce0 <= ap_const_logic_1;
        else 
            knn_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    min_sum_distances_1_s_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_sum_distances_1_reg_79),32));
    p_shl_cast_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_122_p3),7));
    sum_distances_1_min_s_fu_180_p3 <= 
        min_sum_distances_1_s_fu_170_p1 when (tmp_1_fu_174_p2(0) = '1') else 
        min_sum_distances_reg_44;
    sum_distances_fu_199_p2 <= std_logic_vector(unsigned(min_sum_distances_1_reg_79) + unsigned(tmp_3_cast_fu_195_p1));
    tmp_1_fu_174_p2 <= "1" when (signed(min_sum_distances_1_s_fu_170_p1) < signed(min_sum_distances_reg_44)) else "0";
    tmp_2_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_91),7));
    tmp_3_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(knn_set_V_q0),9));
    tmp_4_fu_134_p2 <= std_logic_vector(unsigned(tmp_cast_fu_118_p1) + unsigned(p_shl_cast_fu_130_p1));
    tmp_5_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_160_p2),64));
    tmp_5_fu_160_p2 <= std_logic_vector(unsigned(tmp_4_reg_218) + unsigned(tmp_2_cast_fu_156_p1));
    tmp_6_fu_140_p1 <= val_assign_reg_56(4 - 1 downto 0);
    tmp_cast_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(digit_recognized_reg_68),7));
    tmp_fu_122_p3 <= (digit_recognized_reg_68 & ap_const_lv2_0);
end behav;
