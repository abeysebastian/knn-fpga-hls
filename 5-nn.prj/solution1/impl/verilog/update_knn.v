// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_inst_V,
        train_inst_V,
        min_distances_V_address0,
        min_distances_V_ce0,
        min_distances_V_we0,
        min_distances_V_d0,
        min_distances_V_q0,
        min_distances_V_address1,
        min_distances_V_ce1,
        min_distances_V_we1,
        min_distances_V_d1,
        min_distances_V_offset
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [48:0] test_inst_V;
input  [47:0] train_inst_V;
output  [5:0] min_distances_V_address0;
output   min_distances_V_ce0;
output   min_distances_V_we0;
output  [5:0] min_distances_V_d0;
input  [5:0] min_distances_V_q0;
output  [5:0] min_distances_V_address1;
output   min_distances_V_ce1;
output   min_distances_V_we1;
output  [5:0] min_distances_V_d1;
input  [3:0] min_distances_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] min_distances_V_address0;
reg min_distances_V_ce0;
reg min_distances_V_we0;
reg[5:0] min_distances_V_d0;
reg min_distances_V_ce1;
reg min_distances_V_we1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] tmp_1_fu_144_p2;
reg   [6:0] tmp_1_reg_252;
wire   [48:0] r_V_fu_154_p2;
reg   [48:0] r_V_reg_258;
wire   [5:0] i_fu_170_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] dist_V_fu_187_p2;
wire   [0:0] exitcond_fu_164_p2;
reg   [5:0] min_distances_V_addr_reg_286;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_4_fu_198_p2;
reg   [5:0] min_distance_last_el_1_reg_291;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_6_fu_222_p2;
reg   [0:0] tmp_6_reg_297;
reg   [5:0] min_distances_V_addr_1_reg_301;
wire   [2:0] grp_fu_122_p2;
wire    ap_CS_fsm_state5;
reg   [5:0] min_distance_last_el_reg_88;
reg   [5:0] bvh_d_index_reg_99;
reg   [2:0] i1_reg_110;
wire   [63:0] tmp_2_cast_fu_213_p1;
wire   [63:0] tmp_3_cast_fu_237_p1;
reg   [5:0] temp_min_distance_la_fu_42;
wire   [0:0] tmp_9_fu_247_p2;
wire   [5:0] tmp_fu_132_p3;
wire   [6:0] min_distances_V_offs_1_fu_128_p1;
wire   [6:0] p_shl_cast_fu_140_p1;
wire   [48:0] train_inst_V_cast_fu_150_p1;
wire   [31:0] index_assign_cast2_fu_160_p1;
wire   [0:0] tmp_5_fu_176_p3;
wire   [5:0] tmp_1_cast_fu_183_p1;
wire   [6:0] tmp_5_cast_fu_204_p1;
wire   [6:0] tmp_2_fu_208_p2;
wire   [6:0] tmp_8_cast_fu_228_p1;
wire   [6:0] tmp_3_fu_232_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bvh_d_index_reg_99 <= i_fu_170_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bvh_d_index_reg_99 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_110 <= 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_reg_110 <= grp_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        min_distance_last_el_reg_88 <= dist_V_fu_187_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        min_distance_last_el_reg_88 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        temp_min_distance_la_fu_42 <= min_distances_V_q0;
    end else if (((exitcond_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        temp_min_distance_la_fu_42 <= min_distance_last_el_reg_88;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        min_distance_last_el_1_reg_291 <= min_distances_V_q0;
        tmp_6_reg_297 <= tmp_6_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        min_distances_V_addr_1_reg_301 <= tmp_3_cast_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        min_distances_V_addr_reg_286 <= tmp_2_cast_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_V_reg_258 <= r_V_fu_154_p2;
        tmp_1_reg_252 <= tmp_1_fu_144_p2;
    end
end

always @ (*) begin
    if ((((tmp_4_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((tmp_6_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        min_distances_V_address0 = min_distances_V_addr_reg_286;
    end else if (((tmp_6_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        min_distances_V_address0 = tmp_3_cast_fu_237_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        min_distances_V_address0 = tmp_2_cast_fu_213_p1;
    end else begin
        min_distances_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((tmp_6_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_6_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        min_distances_V_ce0 = 1'b1;
    end else begin
        min_distances_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        min_distances_V_ce1 = 1'b1;
    end else begin
        min_distances_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        min_distances_V_d0 = min_distances_V_q0;
    end else if (((tmp_6_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        min_distances_V_d0 = temp_min_distance_la_fu_42;
    end else begin
        min_distances_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_9_fu_247_p2 == 1'd1) & (tmp_6_reg_297 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_6_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        min_distances_V_we0 = 1'b1;
    end else begin
        min_distances_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_9_fu_247_p2 == 1'd1) & (tmp_6_reg_297 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        min_distances_V_we1 = 1'b1;
    end else begin
        min_distances_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_4_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign dist_V_fu_187_p2 = (min_distance_last_el_reg_88 + tmp_1_cast_fu_183_p1);

assign exitcond_fu_164_p2 = ((bvh_d_index_reg_99 == 6'd49) ? 1'b1 : 1'b0);

assign grp_fu_122_p2 = ($signed(i1_reg_110) + $signed(3'd7));

assign i_fu_170_p2 = (bvh_d_index_reg_99 + 6'd1);

assign index_assign_cast2_fu_160_p1 = bvh_d_index_reg_99;

assign min_distances_V_address1 = min_distances_V_addr_1_reg_301;

assign min_distances_V_d1 = min_distance_last_el_1_reg_291;

assign min_distances_V_offs_1_fu_128_p1 = min_distances_V_offset;

assign p_shl_cast_fu_140_p1 = tmp_fu_132_p3;

assign r_V_fu_154_p2 = (train_inst_V_cast_fu_150_p1 ^ test_inst_V);

assign tmp_1_cast_fu_183_p1 = tmp_5_fu_176_p3;

assign tmp_1_fu_144_p2 = (min_distances_V_offs_1_fu_128_p1 + p_shl_cast_fu_140_p1);

assign tmp_2_cast_fu_213_p1 = tmp_2_fu_208_p2;

assign tmp_2_fu_208_p2 = (tmp_1_reg_252 + tmp_5_cast_fu_204_p1);

assign tmp_3_cast_fu_237_p1 = tmp_3_fu_232_p2;

assign tmp_3_fu_232_p2 = (tmp_1_reg_252 + tmp_8_cast_fu_228_p1);

assign tmp_4_fu_198_p2 = ((i1_reg_110 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_204_p1 = i1_reg_110;

assign tmp_5_fu_176_p3 = r_V_reg_258[index_assign_cast2_fu_160_p1];

assign tmp_6_fu_222_p2 = ((temp_min_distance_la_fu_42 < min_distances_V_q0) ? 1'b1 : 1'b0);

assign tmp_8_cast_fu_228_p1 = grp_fu_122_p2;

assign tmp_9_fu_247_p2 = ((min_distance_last_el_1_reg_291 < min_distances_V_q0) ? 1'b1 : 1'b0);

assign tmp_fu_132_p3 = {{min_distances_V_offset}, {2'd0}};

assign train_inst_V_cast_fu_150_p1 = train_inst_V;

endmodule //update_knn
