-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knn_vote is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    knn_set_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    knn_set_0_V_ce0 : OUT STD_LOGIC;
    knn_set_0_V_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of knn_vote is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal digit_recognized_cas_fu_65_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_recognized_cas_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_75_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_69_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_distances_1_min_s_fu_104_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_digit_recognized_fu_112_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_sum_distances_reg_30 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_reg_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_recognized_reg_54 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal extLd_fu_90_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_94_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_86_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if (((exitcond7_fu_69_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= tmp_fu_86_p1;
                end if; 
            end if;
        end if;
    end process;


    digit_recognized_reg_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                digit_recognized_reg_54 <= i_reg_127;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                digit_recognized_reg_54 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    min_sum_distances_reg_30_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                min_sum_distances_reg_30 <= sum_distances_1_min_s_fu_104_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_sum_distances_reg_30 <= ap_const_lv32_32;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    digit_recognized_cas_reg_119(3 downto 0) <= digit_recognized_cas_fu_65_p1(3 downto 0);
                i_reg_127 <= i_fu_75_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                val_assign_reg_42 <= i_0_digit_recognized_fu_112_p3;
            end if;
        end if;
    end process;
    digit_recognized_cas_reg_119(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_69_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_69_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_69_p2)
    begin
        if ((((exitcond7_fu_69_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_69_p2)
    begin
        if (((exitcond7_fu_69_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_69_p2, tmp_fu_86_p1, ap_return_preg)
    begin
        if (((exitcond7_fu_69_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= tmp_fu_86_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    digit_recognized_cas_fu_65_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(digit_recognized_reg_54),32));
    exitcond7_fu_69_p2 <= "1" when (digit_recognized_reg_54 = ap_const_lv4_A) else "0";
        extLd_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(knn_set_0_V_q0),6));

    i_0_digit_recognized_fu_112_p3 <= 
        digit_recognized_cas_reg_119 when (tmp_1_fu_98_p2(0) = '1') else 
        val_assign_reg_42;
    i_fu_75_p2 <= std_logic_vector(unsigned(digit_recognized_reg_54) + unsigned(ap_const_lv4_1));
    knn_set_0_V_address0 <= tmp_s_fu_81_p1(4 - 1 downto 0);

    knn_set_0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            knn_set_0_V_ce0 <= ap_const_logic_1;
        else 
            knn_set_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_distances_1_min_s_fu_104_p3 <= 
        tmp_3_fu_94_p1 when (tmp_1_fu_98_p2(0) = '1') else 
        min_sum_distances_reg_30;
    tmp_1_fu_98_p2 <= "1" when (signed(tmp_3_fu_94_p1) < signed(min_sum_distances_reg_30)) else "0";
    tmp_3_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(extLd_fu_90_p1),32));
    tmp_fu_86_p1 <= val_assign_reg_42(4 - 1 downto 0);
    tmp_s_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(digit_recognized_reg_54),64));
end behav;
