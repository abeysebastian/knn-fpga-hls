// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="digitrec,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.165000,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=205}" *)

module digitrec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [48:0] input_V;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] knn_set_0_V_q0;
wire   [3:0] i_1_fu_45_p2;
wire    ap_CS_fsm_state2;
wire    grp_knn_vote_fu_33_ap_start;
wire    grp_knn_vote_fu_33_ap_done;
wire    grp_knn_vote_fu_33_ap_idle;
wire    grp_knn_vote_fu_33_ap_ready;
wire   [3:0] grp_knn_vote_fu_33_knn_set_0_V_address0;
wire    grp_knn_vote_fu_33_knn_set_0_V_ce0;
wire   [3:0] grp_knn_vote_fu_33_ap_return;
reg   [3:0] i_reg_22;
wire   [0:0] exitcond1_fu_39_p2;
reg    ap_reg_grp_knn_vote_fu_33_ap_start;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_reg_grp_knn_vote_fu_33_ap_start = 1'b0;
end

digitrec_knn_set_bkb #(
    .DataWidth( 5 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
knn_set_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_knn_vote_fu_33_knn_set_0_V_address0),
    .ce0(grp_knn_vote_fu_33_knn_set_0_V_ce0),
    .q0(knn_set_0_V_q0)
);

knn_vote grp_knn_vote_fu_33(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_knn_vote_fu_33_ap_start),
    .ap_done(grp_knn_vote_fu_33_ap_done),
    .ap_idle(grp_knn_vote_fu_33_ap_idle),
    .ap_ready(grp_knn_vote_fu_33_ap_ready),
    .knn_set_0_V_address0(grp_knn_vote_fu_33_knn_set_0_V_address0),
    .knn_set_0_V_ce0(grp_knn_vote_fu_33_knn_set_0_V_ce0),
    .knn_set_0_V_q0(knn_set_0_V_q0),
    .ap_return(grp_knn_vote_fu_33_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_knn_vote_fu_33_ap_start <= 1'b0;
    end else begin
        if (((exitcond1_fu_39_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_reg_grp_knn_vote_fu_33_ap_start <= 1'b1;
        end else if ((grp_knn_vote_fu_33_ap_ready == 1'b1)) begin
            ap_reg_grp_knn_vote_fu_33_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_39_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_22 <= i_1_fu_45_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_22 <= 4'd0;
    end
end

always @ (*) begin
    if (((grp_knn_vote_fu_33_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_knn_vote_fu_33_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_39_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_knn_vote_fu_33_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = grp_knn_vote_fu_33_ap_return;

assign exitcond1_fu_39_p2 = ((i_reg_22 == 4'd10) ? 1'b1 : 1'b0);

assign grp_knn_vote_fu_33_ap_start = ap_reg_grp_knn_vote_fu_33_ap_start;

assign i_1_fu_45_p2 = (i_reg_22 + 4'd1);

endmodule //digitrec
