-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
    train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
    min_distances_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    min_distances_V_ce0 : OUT STD_LOGIC;
    min_distances_V_we0 : OUT STD_LOGIC;
    min_distances_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    min_distances_V_ce1 : OUT STD_LOGIC;
    min_distances_V_we1 : OUT STD_LOGIC;
    min_distances_V_d1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_V_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of update_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal min_distances_V_addr_reg_184 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_distances_V_addr_1_reg_189 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_fu_134_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_reg_195 : STD_LOGIC_VECTOR (48 downto 0);
    signal i_fu_150_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dist_V_fu_167_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_distances_V_load_reg_213 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_distance_last_el_reg_78 : STD_LOGIC_VECTOR (5 downto 0);
    signal bvh_d_index_reg_91 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_121_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_9_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_102_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_115_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal train_inst_V_cast_fu_130_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal index_assign_cast1_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_cast_fu_163_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bvh_d_index_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bvh_d_index_reg_91 <= i_fu_150_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bvh_d_index_reg_91 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    min_distance_last_el_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                min_distance_last_el_reg_78 <= dist_V_fu_167_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_distance_last_el_reg_78 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    min_distances_V_addr_1_reg_189(4 downto 1) <= tmp_1_fu_110_p1(5 - 1 downto 0)(4 downto 1);
                    min_distances_V_addr_reg_184(4 downto 1) <= tmp_3_fu_121_p3(5 - 1 downto 0)(4 downto 1);
                r_V_reg_195 <= r_V_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                min_distances_V_load_reg_213 <= min_distances_V_q0;
                tmp_6_reg_219 <= tmp_6_fu_173_p2;
            end if;
        end if;
    end process;
    min_distances_V_addr_reg_184(0) <= '1';
    min_distances_V_addr_1_reg_189(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_144_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dist_V_fu_167_p2 <= std_logic_vector(unsigned(min_distance_last_el_reg_78) + unsigned(tmp_1_cast_fu_163_p1));
    exitcond_fu_144_p2 <= "1" when (bvh_d_index_reg_91 = ap_const_lv6_31) else "0";
    i_fu_150_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_91) + unsigned(ap_const_lv6_1));
    index_assign_cast1_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_91),32));

    min_distances_V_address0_assign_proc : process(min_distances_V_addr_reg_184, min_distances_V_addr_1_reg_189, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_6_fu_173_p2, ap_CS_fsm_state4)
    begin
        if (((tmp_6_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            min_distances_V_address0 <= min_distances_V_addr_1_reg_189;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_6_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            min_distances_V_address0 <= min_distances_V_addr_reg_184;
        else 
            min_distances_V_address0 <= "XXXXX";
        end if; 
    end process;

    min_distances_V_address1 <= min_distances_V_addr_1_reg_189;

    min_distances_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_6_fu_173_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_6_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_6_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            min_distances_V_ce0 <= ap_const_logic_1;
        else 
            min_distances_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    min_distances_V_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            min_distances_V_ce1 <= ap_const_logic_1;
        else 
            min_distances_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    min_distances_V_d0_assign_proc : process(min_distances_V_q0, ap_CS_fsm_state3, tmp_6_fu_173_p2, min_distance_last_el_reg_78, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            min_distances_V_d0 <= min_distances_V_q0;
        elsif (((tmp_6_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            min_distances_V_d0 <= min_distance_last_el_reg_78;
        else 
            min_distances_V_d0 <= "XXXXXX";
        end if; 
    end process;

    min_distances_V_d1 <= min_distances_V_load_reg_213;

    min_distances_V_we0_assign_proc : process(ap_CS_fsm_state3, tmp_6_fu_173_p2, tmp_6_reg_219, ap_CS_fsm_state4, tmp_9_fu_179_p2)
    begin
        if ((((tmp_9_fu_179_p2 = ap_const_lv1_1) and (tmp_6_reg_219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_6_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            min_distances_V_we0 <= ap_const_logic_1;
        else 
            min_distances_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    min_distances_V_we1_assign_proc : process(tmp_6_reg_219, ap_CS_fsm_state4, tmp_9_fu_179_p2)
    begin
        if (((tmp_9_fu_179_p2 = ap_const_lv1_1) and (tmp_6_reg_219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            min_distances_V_we1 <= ap_const_logic_1;
        else 
            min_distances_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_134_p2 <= (train_inst_V_cast_fu_130_p1 xor test_inst_V);
    tmp_1_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_156_p3),6));
    tmp_1_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_102_p3),64));
    tmp_2_fu_115_p2 <= (tmp_fu_102_p3 or ap_const_lv5_1);
    tmp_3_fu_121_p3 <= (ap_const_lv59_0 & tmp_2_fu_115_p2);
    tmp_4_fu_156_p3 <= r_V_reg_195(to_integer(unsigned(index_assign_cast1_fu_140_p1)) downto to_integer(unsigned(index_assign_cast1_fu_140_p1))) when (to_integer(unsigned(index_assign_cast1_fu_140_p1))>= 0 and to_integer(unsigned(index_assign_cast1_fu_140_p1))<=48) else "-";
    tmp_6_fu_173_p2 <= "1" when (unsigned(min_distance_last_el_reg_78) < unsigned(min_distances_V_q0)) else "0";
    tmp_9_fu_179_p2 <= "1" when (unsigned(min_distances_V_load_reg_213) < unsigned(min_distances_V_q0)) else "0";
    tmp_fu_102_p3 <= (min_distances_V_offset & ap_const_lv1_0);
    train_inst_V_cast_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(train_inst_V),49));
end behav;
